use chess::{
    definitions::NumberOf,
    pieces::Piece,
    side::Side,
    square::{self},
};

use crate::{
    phased_score::{PhasedScore, S},
    traits::EvalValues,
};

pub const GAME_PHASE_MAX: i32 = 24;

/// Piece-Square Tables, ordered by the ordinality of the pieces. See ['pieces::Piece']
#[rustfmt::skip]
pub const PSQTS : [[PhasedScore; NumberOf::SQUARES]; NumberOf::PIECE_TYPES] = [
    // King
    [
        S( -72,  -69), S(  15,  -29), S(   3,   -8), S( -20,  -15), S( -66,   -3), S( -40,   19), S(  -7,   11), S(   6,  -12), 
        S(  18,   -5), S( -27,   37), S( -50,   38), S( -26,   30), S( -30,   34), S( -26,   54), S( -60,   39), S( -41,   20), 
        S( -30,   25), S( -32,   60), S( -44,   57), S( -67,   53), S( -73,   60), S( -49,   87), S( -27,   81), S( -53,   36), 
        S( -35,    5), S( -70,   59), S( -80,   75), S(-103,   85), S(-111,   88), S(-117,  107), S( -94,   90), S( -80,   37), 
        S( -44,  -22), S( -32,   19), S( -83,   64), S(-116,   83), S(-147,  108), S(-134,   96), S( -90,   54), S( -66,   -2), 
        S(  15,  -42), S(  13,  -22), S(  -7,    0), S(  -2,  -16), S( -72,   48), S( -57,   30), S(  61,  -65), S( 105, -131), 
        S(  50,  -67), S(  94,  -85), S( 124, -116), S( 118, -158), S( 147, -165), S( 187, -191), S(  55,  -47), S( 146, -147), 
        S( 105, -164), S( -92,   94), S(  82,  -81), S( 146, -203), S( 235, -249), S( 233, -271), S(-272,  271), S( 294, -321), 
    ],
    // Queen
    [
        S( 869, 1050), S( 936, 1042), S( 958, 1048), S( 940, 1054), S(1006, 1035), S(1023,  997), S(1015,  995), S( 974, 1047), 
        S( 971,  944), S( 937,  998), S( 899, 1083), S( 902, 1095), S( 890, 1107), S( 983, 1055), S( 998, 1017), S( 984, 1027), 
        S( 954,  969), S( 887, 1057), S( 878, 1093), S( 883, 1129), S( 878, 1154), S( 921, 1126), S( 946, 1075), S( 929, 1094), 
        S( 907, 1025), S( 953,  996), S( 859, 1104), S( 822, 1163), S( 852, 1159), S( 896, 1116), S( 899, 1111), S( 870, 1123), 
        S(1154,  782), S( 895, 1062), S( 842, 1123), S( 827, 1165), S( 845, 1140), S( 903, 1082), S( 868, 1130), S( 929, 1047), 
        S(1084,  849), S( 852, 1079), S( 827, 1133), S( 823, 1138), S( 838, 1123), S( 842, 1134), S( 936, 1046), S(1019,  951), 
        S(1070,  837), S( 979,  948), S( 821, 1117), S( 845, 1098), S(1025,  930), S(1159,  798), S(1094,  832), S(1055,  877), 
        S(1109,  822), S(1181,  738), S(1197,  737), S( 972,  952), S(1225,  719), S(1188,  720), S(1064,  850), S(1023,  849), 
    ],
    // Rook
    [
        S( 383,  642), S( 422,  611), S( 391,  640), S( 401,  646), S( 451,  607), S( 444,  562), S( 474,  550), S( 466,  566), 
        S( 328,  688), S( 317,  707), S( 340,  711), S( 354,  699), S( 392,  665), S( 406,  643), S( 383,  629), S( 405,  621), 
        S( 305,  676), S( 306,  700), S( 297,  717), S( 310,  713), S( 312,  690), S( 368,  654), S( 407,  627), S( 373,  619), 
        S( 310,  649), S( 336,  633), S( 279,  722), S( 304,  704), S( 311,  697), S( 370,  646), S( 365,  605), S( 339,  623), 
        S( 443,  511), S( 402,  559), S( 349,  626), S( 341,  642), S( 375,  611), S( 533,  443), S( 468,  515), S( 446,  508), 
        S( 594,  352), S( 590,  380), S( 496,  474), S( 498,  475), S( 582,  408), S( 601,  381), S( 529,  452), S( 496,  449), 
        S( 635,  309), S( 586,  388), S( 570,  404), S( 618,  371), S( 581,  406), S( 643,  354), S( 559,  419), S( 503,  418), 
        S( 684,  281), S( 692,  290), S( 238,  752), S( 238,  764), S( 241,  757), S( 230,  751), S( 642,  319), S( 709,  236), 
    ],
    // Bishop
    [
        S( 291,  325), S( 362,  281), S( 254,  312), S( 250,  362), S( 302,  325), S( 296,  313), S( 368,  283), S( 322,  305), 
        S( 366,  263), S( 321,  348), S( 242,  403), S( 266,  366), S( 295,  389), S( 302,  399), S( 328,  344), S( 289,  311), 
        S( 312,  331), S( 248,  437), S( 256,  443), S( 236,  459), S( 228,  460), S( 266,  446), S( 294,  398), S( 217,  443), 
        S( 297,  353), S( 218,  452), S( 207,  479), S( 201,  514), S( 215,  492), S( 239,  463), S( 175,  493), S( 332,  326), 
        S( 300,  347), S( 265,  407), S( 142,  542), S( 168,  534), S( 184,  513), S( 186,  493), S( 277,  387), S( 308,  347), 
        S( 470,  184), S( 192,  477), S( 180,  500), S( 107,  579), S( 104,  584), S( 292,  394), S( 251,  420), S( 418,  243), 
        S( 379,  276), S( 633,   29), S( 197,  471), S( 577,   87), S( 328,  340), S( 277,  395), S( 551,  134), S( 309,  328), 
        S( 497,  115), S( 427,  230), S( 581,   49), S( 508,  135), S( 479,  169), S( 590,   47), S( 362,  260), S( 502,  127), 
    ],
    // Knight
    [
        S( 120,  269), S( 221,  267), S( 245,  320), S( 205,  331), S( 339,  305), S( 203,  288), S( 316,  223), S( 208,  202), 
        S( 279,  240), S( 246,  316), S( 289,  370), S( 267,  379), S( 219,  407), S( 303,  347), S( 310,  288), S( 313,  235), 
        S( 273,  270), S( 252,  400), S( 194,  464), S( 192,  495), S( 243,  451), S( 287,  446), S( 329,  337), S( 324,  293), 
        S( 256,  329), S( 227,  404), S( 146,  507), S( 153,  536), S( 168,  503), S( 186,  507), S( 265,  372), S( 275,  342), 
        S( 347,  238), S( 295,  317), S( 182,  460), S( 217,  431), S( 176,  480), S( 256,  391), S( 286,  354), S( 465,  130), 
        S( 500,   76), S( 527,   83), S( 107,  520), S( 244,  394), S( 210,  433), S( 152,  479), S( 279,  343), S( 451,  133), 
        S( 392,  159), S( 417,  133), S( 516,   85), S( 583,   30), S( 550,   69), S( 499,  123), S( 466,  120), S( 338,  219), 
        S( 315,  173), S( 553,   -3), S( 426,  116), S( 470,  106), S( 524,   60), S( 460,  118), S( 492,   62), S( 359,  175), 
    ],
    // Pawn
    [
        S(  82,   94), S(  82,   94), S(  82,   94), S(  82,   94), S(  82,   94), S(  82,   94), S(  82,   94), S(  82,   94), 
        S(   8,  431), S(  54,  418), S(  -7,  392), S(  31,  365), S(  36,  346), S( 102,  322), S(  28,  338), S( -33,  372), 
        S(-138,  391), S(-125,  399), S(-116,  397), S(-118,  386), S( -64,  354), S( -76,  354), S( -67,  338), S(-123,  351), 
        S(-186,  375), S(-149,  356), S(-163,  353), S(-184,  385), S(-169,  364), S(-129,  313), S( -93,  289), S(-133,  288), 
        S(-140,  288), S(-169,  346), S(-177,  342), S(-179,  358), S(-156,  339), S(  77,   42), S( 290, -103), S( 290, -138), 
        S( 300, -145), S( -81,  226), S( 325, -157), S( 363, -195), S( 349, -169), S( 310, -134), S( 319, -116), S(-190,  343), 
        S(-210,  359), S(-126,  298), S( 301, -135), S( 287, -121), S( 319, -143), S(-181,  380), S(-173,  388), S( 285, -139), 
        S(  82,   94), S(  82,   94), S(  82,   94), S(  82,   94), S(  82,   94), S(  82,   94), S(  82,   94), S(  82,   94), 
    ],
];

#[derive(Debug, Clone, Copy, Default)]
pub struct ByteKnightValues {}

impl EvalValues for ByteKnightValues {
    type ReturnScore = PhasedScore;

    fn psqt(&self, square: u8, piece: Piece, side: Side) -> Self::ReturnScore {
        PSQTS[piece as usize][square::flip_if(side == Side::White, square) as usize]
    }
}

#[cfg(test)]
mod tests {
    use chess::board::Board;

    use super::*;
    use crate::{evaluation::Evaluation, psqt::Psqt, traits::Eval};

    #[test]
    fn verify_values_match_pesto() {
        let values = ByteKnightValues::default();
        let eval = Evaluation::new(values);

        let psqt = Psqt::new();

        let board =
            Board::from_fen("r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1")
                .unwrap();

        let score = psqt.evaluate(&board);
        println!("{}", score);
        let new_eval_score = eval.eval(&board);
        println!("{}", new_eval_score);
        assert_eq!(score, new_eval_score);
    }
}
