use chess::{
    definitions::NumberOf,
    pieces::Piece,
    side::Side,
    square::{self},
};

use crate::{
    phased_score::{PhasedScore, S},
    score::ScoreType,
    traits::EvalValues,
};

/// Game phase increment for each piece
/// Ordered to match the indexing of [`Piece`]
/// King, Queen, Rook, Bishop, Knight, Pawn
pub const GAMEPHASE_INC: [ScoreType; 6] = [0, 4, 2, 1, 1, 0];

/// Maximum game phase
pub const GAME_PHASE_MAX: i32 = 24;

/// Piece-Square Tables, ordered by the ordinality of the pieces. See ['pieces::Piece']
#[rustfmt::skip]
pub const PSQTS : [[PhasedScore; NumberOf::SQUARES]; NumberOf::PIECE_TYPES] = [
    // King
    [
        S(  16,  -87), S(  -9,  -35), S(  22,  -26), S(-116,   23), S( -62,    4), S( -10,    6), S(  37,   -1), S( 147, -109),
        S(-103,    8), S( -62,   36), S(-107,   49), S(   2,   30), S( -52,   51), S( -47,   62), S(  -5,   52), S( -27,   21),
        S(-124,   23), S( -19,   40), S( -88,   60), S(-106,   70), S( -66,   69), S(  10,   62), S( -11,   61), S( -47,   32),
        S( -87,   12), S(-100,   46), S(-117,   64), S(-161,   77), S(-148,   76), S(-110,   70), S(-109,   61), S(-133,   36),
        S( -83,    0), S( -94,   32), S(-124,   55), S(-151,   70), S(-148,   69), S(-112,   56), S(-115,   44), S(-138,   28),
        S( -41,   -9), S( -26,   14), S( -82,   35), S( -94,   47), S( -88,   47), S( -85,   38), S( -40,   18), S( -57,    6),
        S(  46,  -30), S(   5,   -3), S(  -8,    9), S( -42,   20), S( -43,   23), S( -25,   13), S(  22,   -5), S(  31,  -23),
        S(  42,  -65), S(  65,  -45), S(  39,  -26), S( -60,   -8), S(   4,  -34), S( -35,  -10), S(  46,  -37), S(  47,  -65),
    ],
    // Queen
    [
        S( 725, 1205), S( 733, 1217), S( 763, 1234), S( 796, 1221), S( 796, 1218), S( 800, 1211), S( 819, 1167), S( 766, 1198),
        S( 763, 1169), S( 739, 1213), S( 747, 1246), S( 740, 1263), S( 745, 1280), S( 782, 1240), S( 761, 1225), S( 805, 1199),
        S( 763, 1180), S( 761, 1197), S( 758, 1239), S( 774, 1241), S( 779, 1255), S( 820, 1235), S( 821, 1198), S( 818, 1186),
        S( 746, 1190), S( 750, 1213), S( 755, 1227), S( 753, 1251), S( 755, 1264), S( 768, 1249), S( 768, 1235), S( 774, 1214),
        S( 748, 1187), S( 746, 1216), S( 745, 1226), S( 753, 1244), S( 752, 1243), S( 751, 1234), S( 762, 1214), S( 765, 1201),
        S( 745, 1176), S( 753, 1192), S( 748, 1215), S( 747, 1213), S( 750, 1217), S( 757, 1208), S( 769, 1186), S( 763, 1174),
        S( 744, 1172), S( 749, 1175), S( 759, 1172), S( 759, 1182), S( 757, 1185), S( 766, 1159), S( 771, 1131), S( 782, 1102),
        S( 742, 1165), S( 731, 1173), S( 739, 1176), S( 754, 1167), S( 745, 1171), S( 732, 1170), S( 755, 1140), S( 747, 1141),
    ],
    // Rook
    [
        S( 407,  642), S( 398,  650), S( 405,  658), S( 410,  654), S( 428,  645), S( 444,  635), S( 427,  638), S( 447,  632),
        S( 389,  642), S( 388,  654), S( 407,  658), S( 426,  650), S( 412,  650), S( 441,  636), S( 427,  632), S( 458,  618),
        S( 369,  642), S( 389,  645), S( 391,  647), S( 394,  645), S( 422,  633), S( 423,  626), S( 460,  617), S( 438,  613),
        S( 354,  644), S( 367,  643), S( 369,  652), S( 377,  649), S( 383,  634), S( 384,  627), S( 392,  624), S( 395,  617),
        S( 335,  637), S( 337,  642), S( 347,  644), S( 359,  643), S( 359,  639), S( 344,  637), S( 367,  624), S( 359,  619),
        S( 328,  633), S( 337,  633), S( 346,  632), S( 345,  637), S( 350,  633), S( 348,  625), S( 381,  605), S( 361,  605),
        S( 326,  628), S( 337,  632), S( 352,  632), S( 349,  634), S( 353,  626), S( 355,  622), S( 371,  613), S( 343,  618),
        S( 344,  623), S( 345,  632), S( 355,  640), S( 360,  638), S( 364,  631), S( 354,  626), S( 368,  622), S( 346,  615),
    ],
    // Bishop
    [
        S( 274,  352), S( 255,  363), S( 266,  361), S( 226,  374), S( 236,  368), S( 254,  358), S( 283,  352), S( 246,  350),
        S( 289,  340), S( 312,  359), S( 307,  363), S( 290,  365), S( 319,  356), S( 318,  355), S( 309,  363), S( 299,  338),
        S( 300,  367), S( 322,  363), S( 323,  373), S( 346,  362), S( 332,  368), S( 363,  368), S( 340,  361), S( 328,  361),
        S( 291,  363), S( 305,  379), S( 326,  374), S( 336,  387), S( 333,  380), S( 329,  377), S( 306,  376), S( 292,  363),
        S( 285,  359), S( 298,  376), S( 304,  384), S( 323,  381), S( 320,  380), S( 306,  379), S( 298,  373), S( 293,  349),
        S( 295,  358), S( 302,  369), S( 302,  376), S( 305,  376), S( 306,  380), S( 301,  376), S( 304,  360), S( 307,  349),
        S( 297,  353), S( 299,  353), S( 309,  352), S( 289,  367), S( 296,  368), S( 308,  357), S( 314,  359), S( 302,  334),
        S( 276,  336), S( 295,  354), S( 280,  335), S( 272,  356), S( 276,  352), S( 275,  353), S( 299,  340), S( 287,  324),
    ],
    // Knight
    [
        S( 124,  263), S( 155,  324), S( 219,  337), S( 251,  330), S( 281,  334), S( 226,  310), S( 172,  331), S( 178,  242),
        S( 253,  318), S( 270,  339), S( 296,  346), S( 313,  345), S( 297,  337), S( 357,  323), S( 270,  335), S( 292,  303),
        S( 269,  333), S( 302,  347), S( 319,  364), S( 331,  365), S( 366,  350), S( 368,  344), S( 325,  338), S( 294,  323),
        S( 265,  343), S( 278,  364), S( 302,  375), S( 323,  377), S( 305,  378), S( 329,  373), S( 288,  363), S( 298,  336),
        S( 252,  344), S( 267,  353), S( 281,  377), S( 283,  377), S( 291,  380), S( 287,  370), S( 285,  356), S( 262,  336),
        S( 234,  329), S( 256,  347), S( 269,  357), S( 272,  371), S( 283,  369), S( 273,  353), S( 277,  342), S( 250,  330),
        S( 221,  320), S( 233,  336), S( 249,  344), S( 260,  348), S( 261,  347), S( 264,  342), S( 251,  327), S( 248,  331),
        S( 179,  313), S( 231,  300), S( 218,  329), S( 233,  333), S( 237,  333), S( 249,  323), S( 234,  307), S( 208,  302),
    ],
    // Pawn
    [
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( 141,  274), S( 162,  267), S( 141,  265), S( 170,  218), S( 154,  214), S( 136,  225), S(  71,  269), S(  47,  283),
        S(  64,  215), S(  76,  224), S( 108,  188), S( 114,  167), S( 117,  159), S( 137,  146), S( 117,  192), S(  76,  190),
        S(  49,  145), S(  71,  136), S(  74,  117), S(  77,  108), S(  97,  100), S(  88,  104), S(  92,  122), S(  70,  122),
        S(  39,  120), S(  64,  119), S(  62,  103), S(  79,   99), S(  78,   98), S(  70,  100), S(  79,  111), S(  57,  104),
        S(  37,  114), S(  60,  118), S(  59,  101), S(  61,  112), S(  75,  106), S(  64,  104), S(  93,  109), S(  64,  100),
        S(  37,  119), S(  60,  122), S(  56,  109), S(  46,  115), S(  65,  121), S(  79,  110), S( 102,  109), S(  57,  101),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    ],
];

pub const PASSED_PAWN_BONUS: PhasedScore = S(-11, 17);

#[derive(Debug, Clone, Copy, Default)]
pub struct ByteKnightValues {}

impl EvalValues for ByteKnightValues {
    type ReturnScore = PhasedScore;

    fn psqt(&self, square: u8, piece: Piece, side: Side) -> Self::ReturnScore {
        PSQTS[piece as usize][square::flip_if(side == Side::White, square) as usize]
    }

    fn passed_pawn_bonus(&self) -> Self::ReturnScore {
        PASSED_PAWN_BONUS
    }
}
