use chess::{
    definitions::NumberOf,
    pieces::Piece,
    side::Side,
    square::{self},
};

use crate::{
    phased_score::{PhasedScore, S},
    traits::EvalValues,
};

/// Piece-Square Tables, ordered by the ordinality of the pieces. See ['pieces::Piece']
#[rustfmt::skip]
pub const PSQTS : [[PhasedScore; NumberOf::SQUARES]; NumberOf::PIECE_TYPES] = [
    // King
    [
        S(-125,  -76), S(-108,  -37), S( -69,  -20), S( -58,  -20), S( -34,   -9), S( -45,   17), S( -62,    2), S( -75,  -19),
        S( -80,  -14), S( -45,   15), S( -21,   14), S( -18,   15), S(  -5,   15), S(   1,   36), S( -19,   21), S( -40,   10),
        S( -49,    8), S(  14,   15), S(  11,   21), S(  49,   13), S(  27,   18), S(  23,   44), S(  29,   42), S(  -6,   12),
        S( -73,   -6), S( -27,   20), S(  24,   22), S(  67,   25), S(  64,   27), S(  55,   35), S(  62,   28), S(  -8,    1),
        S( -43,  -16), S( -21,   -2), S(  40,   23), S(  42,   26), S(  54,   29), S(  46,   25), S(  39,   11), S(  -6,   -9),
        S( -65,  -17), S(   2,   -1), S(  18,   13), S(  46,   23), S(  25,   25), S(  30,   18), S(   1,    8), S( -21,   -9),
        S( -67,  -29), S( -18,   -9), S( -18,    5), S( -16,   15), S(  -2,   16), S( -10,    4), S( -26,   -3), S( -45,  -19),
        S( -77,  -55), S(-132,  -36), S( -86,  -23), S( -45,   -9), S( -62,  -26), S( -58,  -12), S( -89,  -23), S( -80,  -41),
    ],
    // Queen
    [
        S( 997,  929), S(1025,  956), S(1054,  956), S(1037,  962), S(1084,  961), S(1069,  957), S(1068,  944), S(1070,  954),
        S(1001,  921), S( 986,  954), S(1020,  970), S(1026,  979), S(1009,  992), S(1082,  959), S(1053,  968), S(1079,  938),
        S(1012,  918), S(1008,  940), S(1032,  943), S(1033,  983), S(1054,  985), S(1081,  969), S(1072,  953), S(1082,  943),
        S( 998,  941), S( 998,  960), S(1009,  962), S(1009,  983), S(1024,  991), S(1042,  974), S(1023,  991), S(1026,  970),
        S(1016,  920), S( 999,  966), S(1016,  953), S(1015,  981), S(1023,  969), S(1021,  972), S(1028,  973), S(1022,  961),
        S(1011,  922), S(1027,  911), S(1014,  953), S(1023,  940), S(1020,  947), S(1027,  955), S(1039,  948), S(1030,  943),
        S( 990,  912), S(1017,  916), S(1036,  904), S(1027,  922), S(1033,  922), S(1040,  911), S(1022,  902), S(1026,  902),
        S(1024,  901), S(1007,  910), S(1016,  912), S(1035,  891), S(1010,  929), S(1000,  902), S( 994,  914), S( 975,  893),
    ],
    // Rook
    [
        S( 509,  527), S( 519,  520), S( 509,  528), S( 528,  525), S( 540,  522), S( 486,  523), S( 508,  518), S( 520,  515),
        S( 504,  525), S( 509,  523), S( 535,  523), S( 539,  521), S( 557,  507), S( 544,  513), S( 503,  522), S( 521,  513),
        S( 472,  521), S( 496,  517), S( 503,  517), S( 513,  519), S( 494,  514), S( 522,  507), S( 538,  505), S( 493,  507),
        S( 453,  518), S( 466,  517), S( 484,  523), S( 503,  513), S( 501,  512), S( 512,  511), S( 469,  513), S( 457,  516),
        S( 441,  517), S( 451,  519), S( 465,  522), S( 476,  514), S( 486,  509), S( 470,  504), S( 483,  502), S( 454,  503),
        S( 432,  510), S( 452,  514), S( 461,  509), S( 460,  513), S( 480,  507), S( 477,  502), S( 472,  506), S( 444,  498),
        S( 433,  508), S( 461,  508), S( 457,  514), S( 468,  516), S( 476,  504), S( 488,  505), S( 471,  501), S( 406,  511),
        S( 458,  505), S( 464,  516), S( 478,  517), S( 494,  513), S( 493,  505), S( 484,  501), S( 440,  518), S( 451,  494),
    ],
    // Bishop
    [
        S( 536,  281), S( 604,  278), S( 653,  284), S( 664,  291), S( 629,  288), S( 606,  290), S( 556,  282), S( 605,  275),
        S( 619,  287), S( 645,  295), S( 643,  302), S( 651,  283), S( 639,  292), S( 629,  282), S( 600,  291), S( 568,  285),
        S( 635,  301), S( 660,  287), S( 688,  295), S( 657,  294), S( 695,  293), S( 655,  301), S( 660,  295), S( 605,  299),
        S( 626,  292), S( 657,  308), S( 678,  311), S( 699,  308), S( 670,  312), S( 674,  305), S( 647,  302), S( 615,  297),
        S( 666,  289), S( 683,  298), S( 730,  308), S( 686,  314), S( 693,  306), S( 690,  309), S( 699,  292), S( 607,  286),
        S( 653,  283), S( 685,  292), S( 710,  303), S( 725,  309), S( 652,  312), S( 683,  299), S( 624,  288), S( 641,  284),
        S( 642,  285), S( 677,  280), S( 692,  288), S( 652,  298), S( 638,  303), S( 579,  286), S( 659,  284), S( 574,  268),
        S( 578,  276), S( 552,  287), S( 636,  276), S( 687,  294), S( 612,  290), S( 623,  283), S( 501,  290), S( 556,  278),
    ],
    // Knight
    [
        S( 368,  225), S( 485,  245), S( 530,  266), S( 550,  254), S( 465,  248), S( 527,  256), S( 426,  216), S( 317,  180),
        S( 525,  254), S( 587,  275), S( 538,  254), S( 627,  277), S( 598,  270), S( 499,  254), S( 479,  255), S( 446,  227),
        S( 532,  255), S( 553,  259), S( 589,  289), S( 595,  288), S( 611,  278), S( 590,  270), S( 541,  264), S( 519,  242),
        S( 599,  266), S( 623,  282), S( 646,  301), S( 640,  305), S( 627,  301), S( 589,  290), S( 568,  287), S( 514,  261),
        S( 585,  261), S( 598,  273), S( 616,  295), S( 636,  308), S( 608,  295), S( 592,  296), S( 545,  283), S( 521,  261),
        S( 551,  256), S( 597,  280), S( 634,  282), S( 619,  294), S( 627,  293), S( 627,  280), S( 561,  263), S( 509,  261),
        S( 508,  241), S( 527,  263), S( 559,  273), S( 633,  278), S( 562,  277), S( 505,  259), S( 521,  260), S( 507,  235),
        S( 442,  250), S( 511,  228), S( 508,  260), S( 536,  268), S( 531,  261), S( 467,  261), S( 441,  229), S( 327,  219),
    ],
    // Pawn
    [
        S(  82,   94), S(  82,   94), S(  82,   94), S(  82,   94), S(  82,   94), S(  82,   94), S(  82,   94), S(  82,   94),
        S( 316,  270), S( 257,  265), S( 210,  250), S( 296,  226), S( 244,  243), S( 217,  224), S( 263,  257), S( 272,  279),
        S( 312,  186), S( 271,  192), S( 213,  177), S( 223,  159), S( 221,  148), S( 223,  145), S( 266,  174), S( 270,  176),
        S( 314,  124), S( 268,  116), S( 208,  105), S( 196,   97), S( 206,   90), S( 226,   96), S( 249,  110), S( 275,  109),
        S( 317,  109), S( 264,  105), S( 205,   93), S( 186,   89), S( 195,   85), S( 217,   88), S( 248,   99), S( 276,   95),
        S( 319,  100), S( 282,  103), S( 226,   90), S( 213,   97), S( 211,   96), S( 227,   91), S( 258,   95), S( 275,   88),
        S( 308,  109), S( 283,  104), S( 217,  104), S( 296,  106), S( 259,  109), S( 217,   96), S( 247,   98), S( 282,   89),
        S(  82,   94), S(  82,   94), S(  82,   94), S(  82,   94), S(  82,   94), S(  82,   94), S(  82,   94), S(  82,   94),
    ],
];

#[derive(Debug, Clone, Copy, Default)]
pub struct ByteKnightValues {}

impl EvalValues for ByteKnightValues {
    type ReturnScore = PhasedScore;

    fn psqt(&self, square: u8, piece: Piece, side: Side) -> Self::ReturnScore {
        PSQTS[piece as usize][square::flip_if(side == Side::White, square) as usize]
    }
}

#[cfg(test)]
mod tests {
    use chess::board::Board;

    use super::*;
    use crate::{evaluation::Evaluation, psqt::Psqt, traits::Eval};

    #[test]
    fn verify_values_match_pesto() {
        let values = ByteKnightValues::default();
        let eval = Evaluation::new(values);

        let psqt = Psqt::new();

        let board =
            Board::from_fen("r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1")
                .unwrap();

        let score = psqt.evaluate(&board);
        println!("{}", score);
        let new_eval_score = eval.eval(&board);
        println!("{}", new_eval_score);
        assert_eq!(score, new_eval_score);
    }
}
