use chess::{
    definitions::NumberOf,
    pieces::Piece,
    side::Side,
    square::{self},
};

use crate::{
    phased_score::{PhasedScore, S},
    score::ScoreType,
    traits::EvalValues,
};

/// Game phase increment for each piece
/// Ordered to match the indexing of [`Piece`]
/// King, Queen, Rook, Bishop, Knight, Pawn
pub const GAMEPHASE_INC: [ScoreType; 6] = [0, 4, 2, 1, 1, 0];

/// Maximum game phase
pub const GAME_PHASE_MAX: i32 = 24;

/// Piece-Square Tables, ordered by the ordinality of the pieces. See ['pieces::Piece']
#[rustfmt::skip]
pub const PSQTS : [[PhasedScore; NumberOf::SQUARES]; NumberOf::PIECE_TYPES] = [
    // King
    [
        S(  15,  -86), S(  -9,  -36), S(  24,  -26), S(-116,   23), S( -61,    4), S( -10,    6), S(  38,   -1), S( 145, -108),
        S(-101,    7), S( -62,   36), S(-106,   49), S(   1,   30), S( -52,   51), S( -46,   62), S(  -7,   52), S( -27,   21),
        S(-123,   23), S( -20,   40), S( -88,   60), S(-106,   70), S( -66,   70), S(   9,   62), S( -11,   61), S( -47,   32),
        S( -89,   12), S(-101,   46), S(-116,   64), S(-162,   77), S(-149,   76), S(-110,   70), S(-110,   62), S(-134,   36),
        S( -84,    0), S( -93,   31), S(-124,   56), S(-151,   70), S(-149,   69), S(-112,   56), S(-116,   44), S(-139,   28),
        S( -41,   -9), S( -26,   14), S( -82,   35), S( -95,   47), S( -89,   47), S( -86,   38), S( -40,   18), S( -57,    6),
        S(  47,  -31), S(   6,   -3), S(  -8,    9), S( -42,   20), S( -44,   23), S( -25,   13), S(  23,   -5), S(  32,  -23),
        S(  43,  -65), S(  66,  -46), S(  40,  -27), S( -60,   -9), S(   4,  -34), S( -35,  -11), S(  47,  -37), S(  48,  -66),
    ],
    // Queen
    [
        S( 729, 1202), S( 737, 1214), S( 768, 1231), S( 801, 1218), S( 801, 1216), S( 805, 1208), S( 823, 1164), S( 771, 1195),
        S( 768, 1166), S( 744, 1210), S( 752, 1243), S( 745, 1260), S( 750, 1278), S( 787, 1237), S( 766, 1221), S( 809, 1197),
        S( 767, 1177), S( 766, 1194), S( 763, 1236), S( 779, 1239), S( 784, 1253), S( 825, 1232), S( 826, 1195), S( 823, 1183),
        S( 751, 1187), S( 755, 1210), S( 759, 1225), S( 758, 1249), S( 760, 1262), S( 773, 1247), S( 772, 1233), S( 778, 1211),
        S( 752, 1184), S( 750, 1213), S( 749, 1224), S( 758, 1243), S( 756, 1241), S( 755, 1232), S( 767, 1212), S( 770, 1199),
        S( 749, 1173), S( 757, 1190), S( 752, 1213), S( 751, 1212), S( 754, 1215), S( 761, 1206), S( 773, 1184), S( 767, 1172),
        S( 748, 1169), S( 753, 1173), S( 763, 1170), S( 763, 1180), S( 761, 1183), S( 770, 1156), S( 776, 1128), S( 787, 1098),
        S( 746, 1162), S( 735, 1170), S( 742, 1173), S( 758, 1165), S( 749, 1169), S( 736, 1168), S( 759, 1137), S( 751, 1137),
    ],
    // Rook
    [
        S( 411,  643), S( 401,  650), S( 408,  659), S( 414,  655), S( 432,  646), S( 447,  636), S( 430,  638), S( 451,  633),
        S( 393,  643), S( 392,  655), S( 411,  659), S( 430,  650), S( 416,  650), S( 445,  636), S( 431,  633), S( 462,  619),
        S( 372,  643), S( 393,  646), S( 395,  648), S( 398,  646), S( 426,  633), S( 427,  627), S( 464,  618), S( 441,  613),
        S( 357,  645), S( 370,  643), S( 372,  653), S( 381,  649), S( 386,  634), S( 387,  628), S( 395,  625), S( 398,  618),
        S( 338,  638), S( 340,  643), S( 350,  645), S( 363,  644), S( 362,  639), S( 347,  637), S( 370,  624), S( 363,  619),
        S( 331,  634), S( 340,  634), S( 349,  633), S( 348,  638), S( 354,  633), S( 351,  625), S( 385,  605), S( 364,  606),
        S( 328,  629), S( 340,  632), S( 355,  633), S( 352,  635), S( 356,  627), S( 358,  622), S( 374,  613), S( 346,  619),
        S( 347,  624), S( 348,  633), S( 358,  641), S( 363,  639), S( 367,  632), S( 357,  627), S( 372,  623), S( 349,  615),
    ],
    // Bishop
    [
        S( 276,  352), S( 257,  364), S( 267,  361), S( 228,  374), S( 238,  368), S( 256,  359), S( 284,  352), S( 248,  350),
        S( 292,  340), S( 316,  359), S( 310,  363), S( 292,  366), S( 321,  356), S( 321,  355), S( 312,  363), S( 301,  338),
        S( 302,  368), S( 325,  363), S( 326,  374), S( 349,  362), S( 335,  368), S( 366,  369), S( 343,  362), S( 331,  361),
        S( 294,  364), S( 308,  380), S( 329,  374), S( 339,  387), S( 337,  380), S( 332,  378), S( 309,  377), S( 294,  364),
        S( 287,  360), S( 300,  377), S( 306,  385), S( 326,  381), S( 323,  381), S( 309,  379), S( 300,  374), S( 295,  349),
        S( 298,  359), S( 305,  370), S( 305,  377), S( 308,  377), S( 309,  381), S( 304,  377), S( 306,  360), S( 310,  349),
        S( 300,  353), S( 301,  354), S( 312,  352), S( 291,  367), S( 298,  369), S( 311,  357), S( 317,  359), S( 304,  335),
        S( 278,  337), S( 298,  354), S( 283,  335), S( 274,  357), S( 278,  353), S( 278,  353), S( 302,  340), S( 289,  324),
    ],
    // Knight
    [
        S( 126,  263), S( 157,  324), S( 221,  337), S( 253,  330), S( 284,  333), S( 229,  310), S( 174,  330), S( 180,  241),
        S( 257,  317), S( 273,  339), S( 298,  346), S( 315,  345), S( 300,  337), S( 361,  323), S( 273,  335), S( 295,  302),
        S( 271,  333), S( 305,  348), S( 322,  364), S( 334,  365), S( 370,  350), S( 371,  345), S( 328,  338), S( 297,  323),
        S( 267,  343), S( 280,  364), S( 305,  376), S( 326,  377), S( 308,  379), S( 332,  373), S( 291,  363), S( 301,  336),
        S( 254,  344), S( 269,  354), S( 284,  378), S( 285,  378), S( 294,  381), S( 289,  370), S( 288,  357), S( 264,  336),
        S( 235,  329), S( 258,  348), S( 271,  357), S( 274,  371), S( 285,  370), S( 275,  353), S( 279,  342), S( 252,  330),
        S( 222,  320), S( 234,  336), S( 251,  345), S( 262,  348), S( 263,  347), S( 266,  343), S( 252,  327), S( 249,  331),
        S( 180,  312), S( 233,  300), S( 220,  329), S( 234,  333), S( 238,  333), S( 251,  323), S( 235,  307), S( 209,  302),
    ],
    // Pawn
    [
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( 138,  277), S( 160,  270), S( 138,  269), S( 167,  221), S( 150,  217), S( 133,  228), S(  69,  272), S(  44,  286),
        S(  63,  217), S(  75,  226), S( 109,  190), S( 115,  169), S( 117,  161), S( 138,  148), S( 118,  194), S(  76,  192),
        S(  48,  147), S(  71,  137), S(  74,  118), S(  77,  109), S(  97,  101), S(  88,  105), S(  93,  123), S(  69,  124),
        S(  38,  122), S(  64,  121), S(  62,  104), S(  79,  100), S(  79,   99), S(  70,  101), S(  79,  113), S(  57,  105),
        S(  36,  116), S(  60,  119), S(  59,  102), S(  61,  114), S(  75,  108), S(  64,  105), S(  93,  111), S(  64,  101),
        S(  36,  121), S(  60,  124), S(  56,  110), S(  45,  116), S(  65,  122), S(  80,  111), S( 102,  110), S(  57,  103),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    ],
];

pub const PASSED_PAWN_BONUS: PhasedScore = S(-10, 15);

#[derive(Debug, Clone, Copy, Default)]
pub struct ByteKnightValues {}

impl EvalValues for ByteKnightValues {
    type ReturnScore = PhasedScore;

    fn psqt(&self, square: u8, piece: Piece, side: Side) -> Self::ReturnScore {
        PSQTS[piece as usize][square::flip_if(side == Side::White, square) as usize]
    }

    fn passed_pawn_bonus(&self) -> Self::ReturnScore {
        PASSED_PAWN_BONUS
    }
}
