use chess::{
    definitions::NumberOf,
    pieces::Piece,
    side::Side,
    square::{self},
};

use crate::{
    phased_score::{PhasedScore, S},
    score::ScoreType,
    traits::EvalValues,
};

/// Game phase increment for each piece
/// Ordered to match the indexing of [`Piece`]
/// King, Queen, Rook, Bishop, Knight, Pawn
pub const GAMEPHASE_INC: [ScoreType; 6] = [0, 4, 2, 1, 1, 0];

/// Maximum game phase
pub const GAME_PHASE_MAX: i32 = 24;

/// Piece-Square Tables, ordered by the ordinality of the pieces. See ['pieces::Piece']
#[rustfmt::skip]
pub const PSQTS : [[PhasedScore; NumberOf::SQUARES]; NumberOf::PIECE_TYPES] = [
    // King
    [
        S(  15, -100), S(  -1,  -44), S(  19,  -27), S(-123,   25), S( -77,    5), S( -10,    5), S(  61,   -7), S( 185, -128),
        S(-116,    4), S( -74,   38), S(-111,   51), S(  -6,   34), S( -57,   53), S( -54,   67), S(   6,   51), S( -18,   18),
        S(-137,   20), S( -18,   41), S( -90,   63), S(-118,   75), S( -73,   74), S(  16,   65), S(  -4,   62), S( -47,   30),
        S( -99,   10), S(-110,   48), S(-128,   69), S(-180,   84), S(-167,   83), S(-122,   76), S(-118,   65), S(-144,   35),
        S(-101,   -0), S(-105,   33), S(-143,   61), S(-175,   79), S(-167,   77), S(-125,   62), S(-129,   47), S(-158,   30),
        S( -43,  -12), S( -29,   15), S( -93,   40), S(-106,   54), S( -98,   53), S( -96,   43), S( -45,   21), S( -63,    7),
        S(  55,  -33), S(   8,   -2), S(  -8,   11), S( -46,   22), S( -48,   26), S( -27,   16), S(  26,   -5), S(  37,  -26),
        S(  49,  -75), S(  74,  -51), S(  45,  -29), S( -66,  -10), S(   6,  -39), S( -38,  -12), S(  53,  -42), S(  55,  -74),
    ],
    // Queen
    [
        S( 806, 1375), S( 817, 1386), S( 849, 1405), S( 884, 1393), S( 882, 1392), S( 895, 1377), S( 914, 1330), S( 853, 1367),
        S( 849, 1336), S( 823, 1383), S( 831, 1418), S( 823, 1440), S( 829, 1458), S( 871, 1412), S( 845, 1399), S( 895, 1371),
        S( 850, 1345), S( 847, 1364), S( 844, 1410), S( 862, 1412), S( 867, 1428), S( 914, 1406), S( 915, 1366), S( 911, 1355),
        S( 831, 1360), S( 835, 1384), S( 840, 1399), S( 839, 1425), S( 841, 1439), S( 855, 1424), S( 854, 1410), S( 861, 1386),
        S( 832, 1355), S( 830, 1387), S( 829, 1396), S( 838, 1418), S( 837, 1417), S( 836, 1407), S( 849, 1385), S( 852, 1372),
        S( 830, 1340), S( 838, 1359), S( 832, 1385), S( 831, 1384), S( 834, 1388), S( 842, 1377), S( 856, 1352), S( 849, 1339),
        S( 828, 1337), S( 834, 1339), S( 845, 1336), S( 845, 1347), S( 843, 1350), S( 853, 1321), S( 859, 1287), S( 871, 1256),
        S( 826, 1328), S( 814, 1336), S( 822, 1339), S( 839, 1329), S( 830, 1334), S( 815, 1332), S( 840, 1299), S( 831, 1303),
    ],
    // Rook
    [
        S( 455,  731), S( 445,  740), S( 452,  749), S( 457,  745), S( 479,  735), S( 495,  725), S( 474,  729), S( 500,  720),
        S( 435,  732), S( 433,  745), S( 455,  749), S( 476,  739), S( 461,  739), S( 493,  723), S( 478,  719), S( 511,  706),
        S( 411,  732), S( 435,  733), S( 437,  735), S( 441,  733), S( 472,  718), S( 474,  710), S( 516,  701), S( 490,  697),
        S( 394,  734), S( 409,  732), S( 412,  741), S( 421,  737), S( 428,  720), S( 429,  713), S( 438,  712), S( 440,  704),
        S( 373,  727), S( 377,  732), S( 387,  733), S( 401,  732), S( 401,  727), S( 384,  725), S( 410,  711), S( 400,  707),
        S( 366,  722), S( 377,  721), S( 386,  720), S( 385,  726), S( 391,  720), S( 389,  712), S( 426,  689), S( 402,  691),
        S( 363,  716), S( 376,  720), S( 393,  719), S( 389,  721), S( 394,  712), S( 396,  708), S( 415,  698), S( 383,  705),
        S( 384,  709), S( 386,  719), S( 396,  728), S( 402,  726), S( 406,  718), S( 395,  713), S( 412,  708), S( 386,  700),
    ],
    // Bishop
    [
        S( 306,  401), S( 284,  416), S( 296,  411), S( 252,  425), S( 266,  418), S( 284,  408), S( 317,  405), S( 275,  399),
        S( 322,  391), S( 349,  410), S( 343,  414), S( 324,  416), S( 356,  406), S( 355,  406), S( 346,  413), S( 333,  387),
        S( 335,  418), S( 361,  413), S( 361,  424), S( 386,  412), S( 371,  418), S( 406,  421), S( 380,  413), S( 367,  413),
        S( 326,  415), S( 342,  432), S( 365,  426), S( 376,  441), S( 373,  434), S( 369,  430), S( 342,  430), S( 326,  415),
        S( 318,  412), S( 333,  429), S( 340,  438), S( 362,  436), S( 358,  434), S( 342,  432), S( 333,  427), S( 328,  399),
        S( 330,  409), S( 338,  422), S( 338,  430), S( 341,  430), S( 343,  435), S( 337,  429), S( 340,  410), S( 344,  398),
        S( 333,  403), S( 334,  404), S( 346,  402), S( 323,  418), S( 331,  420), S( 345,  407), S( 352,  409), S( 337,  382),
        S( 309,  384), S( 331,  403), S( 314,  382), S( 304,  407), S( 309,  402), S( 308,  402), S( 334,  388), S( 321,  368),
    ],
    // Knight
    [
        S( 137,  301), S( 178,  365), S( 244,  386), S( 280,  376), S( 314,  380), S( 251,  356), S( 197,  371), S( 198,  277),
        S( 283,  365), S( 302,  386), S( 331,  394), S( 351,  392), S( 333,  385), S( 401,  369), S( 301,  382), S( 326,  348),
        S( 302,  378), S( 339,  395), S( 356,  414), S( 370,  416), S( 410,  399), S( 414,  390), S( 364,  387), S( 330,  368),
        S( 297,  393), S( 311,  415), S( 338,  428), S( 361,  430), S( 342,  431), S( 369,  425), S( 323,  414), S( 334,  384),
        S( 282,  394), S( 299,  405), S( 315,  430), S( 316,  431), S( 326,  434), S( 321,  421), S( 320,  406), S( 293,  384),
        S( 261,  376), S( 286,  397), S( 301,  408), S( 305,  424), S( 317,  421), S( 305,  403), S( 310,  390), S( 279,  377),
        S( 246,  368), S( 259,  384), S( 278,  394), S( 291,  397), S( 292,  396), S( 295,  392), S( 280,  373), S( 277,  378),
        S( 199,  360), S( 258,  344), S( 243,  377), S( 260,  379), S( 265,  380), S( 279,  368), S( 261,  350), S( 231,  349),
    ],
    // Pawn
    [
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( 170,  319), S( 193,  308), S( 172,  305), S( 206,  249), S( 183,  247), S( 165,  261), S(  94,  309), S(  66,  327),
        S(  80,  164), S(  95,  166), S( 124,  117), S( 127,   79), S( 134,   76), S( 167,   97), S( 143,  141), S(  98,  146),
        S(  57,  148), S(  82,  140), S(  84,  116), S(  86,   98), S( 110,   98), S( 101,  105), S( 107,  128), S(  82,  123),
        S(  46,  132), S(  74,  133), S(  72,  113), S(  90,  107), S(  89,  107), S(  81,  112), S(  92,  124), S(  68,  113),
        S(  44,  126), S(  69,  131), S(  68,  111), S(  69,  118), S(  84,  117), S(  73,  115), S( 107,  120), S(  76,  109),
        S(  45,  131), S(  69,  134), S(  63,  118), S(  53,  117), S(  74,  128), S(  91,  119), S( 117,  119), S(  67,  109),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    ],
];

pub const PASSED_PAWN_BONUS: [PhasedScore; NumberOf::PASSED_PAWN_RANKS] = [
    S( -22,    9),
    S(   2,  124),
    S(   8,   55),
    S( -16,   28),
    S( -19,    4),
    S( -13,   -2),
];

const RANK_1: u8 = 1;

#[derive(Debug, Clone, Copy, Default)]
pub struct ByteKnightValues {}

impl EvalValues for ByteKnightValues {
    type ReturnScore = PhasedScore;

    fn psqt(&self, square: u8, piece: Piece, side: Side) -> Self::ReturnScore {
        PSQTS[piece as usize][square::flip_if(side == Side::White, square) as usize]
    }

    fn passed_pawn_bonus(&self, square: u8, side: Side) -> Self::ReturnScore {
        let (_file, rank) = square::from_square(square::flip_if(side == Side::White, square));
        PASSED_PAWN_BONUS[(rank - RANK_1) as usize]
    }
}
