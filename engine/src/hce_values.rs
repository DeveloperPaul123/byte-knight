use chess::{
    definitions::NumberOf,
    pieces::Piece,
    side::Side,
    square::{self},
};

use crate::{
    phased_score::{PhasedScore, S},
    score::ScoreType,
    traits::EvalValues,
};

/// Game phase increment for each piece
/// Ordered to match the indexing of [`Piece`]
/// King, Queen, Rook, Bishop, Knight, Pawn
pub const GAMEPHASE_INC: [ScoreType; 6] = [0, 4, 2, 1, 1, 0];

/// Maximum game phase
pub const GAME_PHASE_MAX: i32 = 24;

/// Piece-Square Tables, ordered by the ordinality of the pieces. See ['pieces::Piece']
#[rustfmt::skip]
pub const PSQTS : [[PhasedScore; NumberOf::SQUARES]; NumberOf::PIECE_TYPES] = [
    // King
    [
        S(  12, -101), S( -10,  -43), S(  24,  -31), S(-131,   24), S( -71,    2), S( -14,    5), S(  49,   -5), S( 175, -126),
        S(-115,    4), S( -73,   38), S(-116,   52), S(  -1,   32), S( -59,   56), S( -52,   69), S(  -4,   55), S( -28,   20),
        S(-138,   22), S( -19,   42), S( -97,   64), S(-121,   77), S( -72,   76), S(  14,   67), S( -13,   66), S( -48,   32),
        S( -97,   10), S(-112,   50), S(-131,   70), S(-182,   84), S(-168,   84), S(-123,   77), S(-122,   67), S(-149,   39),
        S( -94,   -1), S(-104,   34), S(-140,   61), S(-173,   78), S(-166,   76), S(-124,   62), S(-127,   47), S(-154,   29),
        S( -41,  -12), S( -25,   14), S( -89,   39), S(-103,   52), S( -96,   51), S( -93,   41), S( -41,   19), S( -61,    6),
        S(  58,  -34), S(  10,   -4), S(  -5,    9), S( -43,   21), S( -45,   24), S( -24,   14), S(  29,   -7), S(  39,  -27),
        S(  51,  -73), S(  77,  -51), S(  48,  -30), S( -64,  -10), S(   8,  -39), S( -36,  -13), S(  56,  -43), S(  58,  -75),
    ],
    // Queen
    [
        S( 814, 1376), S( 823, 1390), S( 857, 1408), S( 894, 1393), S( 892, 1394), S( 899, 1382), S( 923, 1331), S( 862, 1367),
        S( 858, 1335), S( 831, 1384), S( 840, 1421), S( 831, 1442), S( 838, 1460), S( 879, 1416), S( 854, 1399), S( 905, 1369),
        S( 858, 1347), S( 856, 1365), S( 852, 1413), S( 870, 1417), S( 876, 1433), S( 922, 1409), S( 924, 1367), S( 920, 1355),
        S( 839, 1360), S( 843, 1385), S( 848, 1400), S( 847, 1427), S( 849, 1442), S( 864, 1426), S( 863, 1409), S( 870, 1385),
        S( 841, 1355), S( 838, 1389), S( 837, 1399), S( 847, 1420), S( 845, 1418), S( 844, 1408), S( 857, 1386), S( 861, 1371),
        S( 838, 1342), S( 846, 1361), S( 840, 1387), S( 839, 1385), S( 843, 1389), S( 851, 1379), S( 864, 1354), S( 857, 1340),
        S( 836, 1338), S( 842, 1341), S( 853, 1338), S( 853, 1349), S( 851, 1352), S( 861, 1322), S( 867, 1289), S( 880, 1256),
        S( 834, 1329), S( 822, 1338), S( 830, 1341), S( 847, 1331), S( 838, 1336), S( 823, 1335), S( 849, 1299), S( 840, 1302),
    ],
    // Rook
    [
        S( 460,  731), S( 450,  739), S( 457,  749), S( 463,  745), S( 483,  734), S( 503,  723), S( 481,  726), S( 505,  719),
        S( 440,  731), S( 438,  744), S( 460,  749), S( 481,  739), S( 465,  740), S( 498,  724), S( 482,  720), S( 517,  704),
        S( 417,  731), S( 440,  734), S( 442,  736), S( 445,  735), S( 476,  720), S( 478,  712), S( 521,  702), S( 495,  697),
        S( 399,  733), S( 415,  731), S( 417,  741), S( 426,  738), S( 433,  721), S( 434,  714), S( 443,  711), S( 446,  703),
        S( 378,  727), S( 381,  731), S( 392,  734), S( 405,  732), S( 405,  727), S( 389,  725), S( 415,  711), S( 405,  705),
        S( 370,  721), S( 381,  721), S( 390,  720), S( 390,  726), S( 396,  720), S( 393,  712), S( 431,  689), S( 407,  690),
        S( 367,  715), S( 381,  719), S( 397,  719), S( 394,  722), S( 398,  713), S( 401,  708), S( 419,  698), S( 387,  703),
        S( 388,  709), S( 390,  719), S( 401,  728), S( 406,  726), S( 411,  718), S( 400,  713), S( 416,  708), S( 391,  699),
    ],
    // Bishop
    [
        S( 309,  400), S( 288,  414), S( 300,  410), S( 256,  424), S( 267,  419), S( 287,  408), S( 320,  401), S( 277,  399),
        S( 326,  388), S( 352,  407), S( 347,  413), S( 328,  416), S( 360,  405), S( 360,  405), S( 349,  413), S( 337,  385),
        S( 339,  418), S( 365,  413), S( 365,  424), S( 391,  413), S( 375,  418), S( 411,  419), S( 384,  412), S( 371,  412),
        S( 329,  413), S( 345,  432), S( 369,  425), S( 380,  440), S( 377,  432), S( 372,  430), S( 346,  429), S( 330,  413),
        S( 322,  410), S( 337,  428), S( 343,  438), S( 365,  434), S( 362,  433), S( 346,  431), S( 337,  425), S( 331,  398),
        S( 334,  408), S( 341,  421), S( 341,  429), S( 345,  429), S( 346,  433), S( 340,  428), S( 343,  410), S( 347,  397),
        S( 336,  401), S( 338,  402), S( 350,  401), S( 326,  417), S( 334,  419), S( 348,  406), S( 355,  408), S( 341,  381),
        S( 312,  382), S( 334,  403), S( 317,  381), S( 307,  406), S( 312,  401), S( 311,  401), S( 338,  388), S( 324,  368),
    ],
    // Knight
    [
        S( 140,  299), S( 177,  368), S( 247,  384), S( 285,  374), S( 318,  379), S( 255,  354), S( 194,  377), S( 200,  276),
        S( 286,  362), S( 306,  384), S( 334,  393), S( 354,  392), S( 336,  384), S( 404,  368), S( 305,  380), S( 330,  344),
        S( 304,  379), S( 342,  395), S( 361,  414), S( 374,  416), S( 414,  399), S( 417,  391), S( 367,  385), S( 333,  367),
        S( 300,  391), S( 314,  414), S( 342,  427), S( 365,  429), S( 345,  430), S( 373,  424), S( 326,  413), S( 337,  381),
        S( 285,  392), S( 302,  403), S( 318,  429), S( 320,  429), S( 330,  433), S( 324,  420), S( 323,  405), S( 297,  382),
        S( 264,  374), S( 289,  395), S( 304,  407), S( 308,  422), S( 320,  420), S( 309,  402), S( 313,  389), S( 282,  376),
        S( 250,  364), S( 263,  382), S( 281,  391), S( 294,  395), S( 295,  395), S( 298,  389), S( 283,  371), S( 280,  376),
        S( 203,  356), S( 261,  341), S( 247,  375), S( 263,  379), S( 268,  379), S( 282,  367), S( 264,  349), S( 235,  344),
    ],
    // Pawn
    [
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( 170,  316), S( 191,  309), S( 169,  306), S( 200,  251), S( 181,  247), S( 159,  260), S(  89,  309), S(  61,  326),
        S(  71,  239), S(  83,  248), S( 119,  204), S( 126,  181), S( 129,  172), S( 156,  161), S( 131,  213), S(  86,  211),
        S(  56,  164), S(  81,  154), S(  83,  129), S(  86,  117), S( 110,  111), S( 100,  115), S( 105,  138), S(  80,  137),
        S(  45,  141), S(  73,  140), S(  71,  119), S(  90,  113), S(  90,  112), S(  81,  116), S(  90,  130), S(  66,  121),
        S(  43,  135), S(  68,  139), S(  68,  118), S(  69,  128), S(  85,  122), S(  73,  121), S( 106,  128), S(  73,  118),
        S(  43,  141), S(  68,  143), S(  63,  127), S(  52,  132), S(  74,  138), S(  90,  126), S( 116,  127), S(  65,  119),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    ],
];

pub const PASSED_PAWN_BONUS: [PhasedScore; NumberOf::PASSED_PAWN_RANKS] = [
    S(-33, 8),
    S(2, 38),
    S(5, 42),
    S(-17, 22),
    S(-20, -0),
    S(-11, -7),
];

const RANK_1: u8 = 1;

#[derive(Debug, Clone, Copy, Default)]
pub struct ByteKnightValues {}

impl EvalValues for ByteKnightValues {
    type ReturnScore = PhasedScore;

    fn psqt(&self, square: u8, piece: Piece, side: Side) -> Self::ReturnScore {
        PSQTS[piece as usize][square::flip_if(side == Side::White, square) as usize]
    }

    fn passed_pawn_bonus(&self, square: u8, side: Side) -> Self::ReturnScore {
        let (_file, rank) = square::from_square(square::flip_if(side == Side::White, square));
        PASSED_PAWN_BONUS[(rank - RANK_1) as usize]
    }
}
