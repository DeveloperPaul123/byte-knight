use chess::{
    definitions::NumberOf,
    pieces::Piece,
    side::Side,
    square::{self},
};

use crate::{
    phased_score::{PhasedScore, S},
    score::ScoreType,
    traits::EvalValues,
};

/// Game phase increment for each piece
/// Ordered to match the indexing of [`Piece`]
/// King, Queen, Rook, Bishop, Knight, Pawn
pub const GAMEPHASE_INC: [ScoreType; 6] = [0, 4, 2, 1, 1, 0];

/// Maximum game phase
pub const GAME_PHASE_MAX: i32 = 24;

/// Piece-Square Tables, ordered by the ordinality of the pieces. See ['pieces::Piece']
#[rustfmt::skip]
pub const PSQTS : [[PhasedScore; NumberOf::SQUARES]; NumberOf::PIECE_TYPES] = [
    // King
    [
        S(  15,  -99), S(  -2,  -44), S(  19,  -27), S(-123,   25), S( -76,    5), S( -11,    5), S(  59,   -6), S( 181, -126),
        S(-115,    5), S( -74,   38), S(-110,   51), S(  -6,   34), S( -57,   53), S( -54,   66), S(   6,   51), S( -18,   18),
        S(-136,   20), S( -18,   41), S( -90,   62), S(-117,   75), S( -72,   73), S(  16,   64), S(  -4,   62), S( -47,   30),
        S( -99,   10), S(-110,   48), S(-127,   69), S(-179,   83), S(-166,   82), S(-122,   75), S(-117,   64), S(-143,   35),
        S(-101,   -0), S(-104,   33), S(-142,   61), S(-174,   78), S(-166,   76), S(-124,   61), S(-128,   47), S(-157,   30),
        S( -43,  -12), S( -30,   15), S( -92,   40), S(-106,   53), S( -98,   53), S( -95,   43), S( -45,   21), S( -63,    7),
        S(  54,  -32), S(   7,   -2), S(  -9,   11), S( -46,   22), S( -48,   26), S( -28,   16), S(  26,   -5), S(  36,  -25),
        S(  48,  -74), S(  73,  -51), S(  44,  -29), S( -65,  -10), S(   5,  -38), S( -38,  -12), S(  52,  -41), S(  54,  -73),
    ],
    // Queen
    [
        S( 797, 1360), S( 808, 1370), S( 840, 1389), S( 874, 1377), S( 873, 1376), S( 885, 1362), S( 904, 1315), S( 843, 1352),
        S( 840, 1321), S( 813, 1367), S( 822, 1402), S( 813, 1423), S( 820, 1441), S( 861, 1396), S( 836, 1383), S( 885, 1355),
        S( 840, 1330), S( 838, 1349), S( 835, 1394), S( 852, 1396), S( 857, 1412), S( 903, 1391), S( 905, 1351), S( 901, 1339),
        S( 821, 1345), S( 826, 1368), S( 831, 1383), S( 829, 1409), S( 832, 1423), S( 846, 1408), S( 844, 1394), S( 851, 1370),
        S( 823, 1340), S( 821, 1371), S( 820, 1380), S( 829, 1402), S( 827, 1401), S( 826, 1391), S( 839, 1369), S( 842, 1356),
        S( 820, 1325), S( 829, 1344), S( 823, 1370), S( 822, 1369), S( 825, 1373), S( 833, 1362), S( 847, 1337), S( 839, 1324),
        S( 818, 1322), S( 825, 1324), S( 836, 1321), S( 835, 1331), S( 833, 1335), S( 843, 1306), S( 850, 1272), S( 862, 1242),
        S( 816, 1313), S( 805, 1321), S( 813, 1324), S( 830, 1314), S( 820, 1319), S( 806, 1317), S( 830, 1285), S( 822, 1288),
    ],
    // Rook
    [
        S( 449,  723), S( 439,  731), S( 447,  741), S( 452,  737), S( 473,  726), S( 490,  717), S( 468,  720), S( 494,  712),
        S( 430,  724), S( 428,  736), S( 449,  740), S( 470,  731), S( 455,  731), S( 487,  715), S( 473,  711), S( 506,  698),
        S( 406,  723), S( 430,  725), S( 432,  727), S( 436,  724), S( 467,  709), S( 469,  702), S( 510,  693), S( 484,  690),
        S( 389,  726), S( 404,  724), S( 408,  732), S( 416,  729), S( 423,  712), S( 424,  705), S( 433,  704), S( 435,  696),
        S( 369,  719), S( 373,  724), S( 383,  725), S( 396,  723), S( 396,  719), S( 380,  717), S( 405,  703), S( 396,  699),
        S( 362,  714), S( 372,  713), S( 381,  712), S( 381,  718), S( 387,  712), S( 384,  704), S( 421,  682), S( 398,  684),
        S( 359,  708), S( 372,  712), S( 388,  711), S( 385,  713), S( 389,  704), S( 392,  700), S( 410,  690), S( 378,  697),
        S( 380,  701), S( 381,  711), S( 392,  720), S( 397,  718), S( 402,  710), S( 391,  705), S( 407,  700), S( 382,  692),
    ],
    // Bishop
    [
        S( 302,  396), S( 281,  412), S( 293,  407), S( 249,  421), S( 263,  413), S( 280,  404), S( 313,  400), S( 272,  395),
        S( 319,  386), S( 345,  405), S( 339,  409), S( 321,  412), S( 352,  402), S( 351,  402), S( 342,  408), S( 329,  383),
        S( 331,  414), S( 357,  409), S( 357,  419), S( 382,  408), S( 367,  413), S( 401,  416), S( 376,  408), S( 363,  408),
        S( 322,  411), S( 338,  427), S( 361,  421), S( 372,  436), S( 369,  429), S( 365,  425), S( 338,  425), S( 322,  410),
        S( 315,  408), S( 329,  424), S( 336,  433), S( 357,  431), S( 354,  429), S( 338,  427), S( 329,  422), S( 324,  395),
        S( 326,  405), S( 334,  417), S( 334,  425), S( 337,  425), S( 339,  430), S( 333,  424), S( 336,  406), S( 340,  394),
        S( 329,  399), S( 330,  399), S( 342,  397), S( 319,  413), S( 327,  415), S( 341,  403), S( 348,  404), S( 334,  378),
        S( 305,  379), S( 327,  399), S( 310,  378), S( 301,  402), S( 306,  397), S( 305,  397), S( 330,  384), S( 317,  363),
    ],
    // Knight
    [
        S( 136,  298), S( 176,  361), S( 241,  382), S( 277,  372), S( 310,  376), S( 249,  352), S( 194,  367), S( 196,  274),
        S( 279,  361), S( 299,  381), S( 327,  390), S( 347,  388), S( 329,  381), S( 396,  365), S( 298,  378), S( 322,  344),
        S( 298,  374), S( 335,  391), S( 352,  410), S( 366,  411), S( 405,  394), S( 410,  386), S( 359,  382), S( 326,  364),
        S( 293,  389), S( 308,  411), S( 334,  423), S( 357,  425), S( 338,  426), S( 365,  420), S( 319,  410), S( 330,  379),
        S( 279,  390), S( 295,  401), S( 311,  425), S( 313,  426), S( 322,  430), S( 317,  416), S( 316,  401), S( 290,  380),
        S( 258,  371), S( 283,  393), S( 297,  404), S( 301,  419), S( 313,  416), S( 302,  399), S( 306,  386), S( 276,  373),
        S( 244,  364), S( 257,  380), S( 275,  389), S( 288,  392), S( 289,  391), S( 291,  387), S( 277,  369), S( 274,  373),
        S( 197,  356), S( 255,  340), S( 241,  373), S( 257,  375), S( 262,  375), S( 276,  364), S( 258,  346), S( 229,  345),
    ],
    // Pawn
    [
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( 169,  319), S( 193,  308), S( 172,  305), S( 205,  249), S( 183,  247), S( 165,  261), S(  94,  309), S(  67,  326),
        S(  79,  162), S(  94,  164), S( 123,  116), S( 125,   78), S( 133,   75), S( 166,   96), S( 141,  139), S(  97,  144),
        S(  57,  147), S(  81,  139), S(  83,  115), S(  85,   97), S( 108,   97), S( 100,  104), S( 106,  127), S(  81,  122),
        S(  46,  130), S(  73,  132), S(  71,  111), S(  89,  105), S(  88,  105), S(  80,  110), S(  91,  122), S(  67,  111),
        S(  44,  124), S(  68,  129), S(  67,  110), S(  68,  117), S(  83,  116), S(  72,  113), S( 106,  119), S(  75,  108),
        S(  44,  129), S(  68,  132), S(  63,  116), S(  52,  115), S(  73,  126), S(  90,  118), S( 116,  118), S(  67,  108),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    ],
];

pub const PASSED_PAWN_BONUS: [PhasedScore; NumberOf::PASSED_PAWN_RANKS] = [
    S( -24,    6),
    S(   2,  122),
    S(   8,   54),
    S( -16,   27),
    S( -18,    4),
    S( -13,   -2),
];

const RANK_1: u8 = 1;

#[derive(Debug, Clone, Copy, Default)]
pub struct ByteKnightValues {}

impl EvalValues for ByteKnightValues {
    type ReturnScore = PhasedScore;

    fn psqt(&self, square: u8, piece: Piece, side: Side) -> Self::ReturnScore {
        PSQTS[piece as usize][square::flip_if(side == Side::White, square) as usize]
    }

    fn passed_pawn_bonus(&self, square: u8, side: Side) -> Self::ReturnScore {
        let (_file, rank) = square::from_square(square::flip_if(side == Side::White, square));
        PASSED_PAWN_BONUS[(rank - RANK_1) as usize]
    }
}
