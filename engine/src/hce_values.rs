use chess::{
    definitions::NumberOf,
    pieces::Piece,
    side::Side,
    square::{self},
};

use crate::{
    phased_score::{PhasedScore, S},
    traits::EvalValues,
};

pub const GAME_PHASE_MAX: i32 = 24;

/// Piece-Square Tables, ordered by the ordinality of the pieces. See ['pieces::Piece']
#[rustfmt::skip]
pub const PSQTS : [[PhasedScore; NumberOf::SQUARES]; NumberOf::PIECE_TYPES]  = [
    // King
    [
        S( -65,  -74), S(  23,  -35), S(  16,  -18), S( -15,  -18), S( -56,  -11), S( -34,   15), S(   2,    4), S(  13,  -17),
        S(  29,  -12), S(  -1,   17), S( -20,   14), S(  -7,   17), S(  -8,   17), S(  -4,   38), S( -38,   23), S( -29,   11),
        S(  -9,   10), S(  24,   17), S(   2,   23), S( -16,   15), S( -20,   20), S(   6,   45), S(  22,   44), S( -22,   13),
        S( -17,   -8), S( -20,   22), S( -12,   24), S( -27,   27), S( -30,   26), S( -25,   33), S( -14,   26), S( -36,    3),
        S( -49,  -18), S(  -1,   -4), S( -27,   21), S( -39,   24), S( -46,   27), S( -44,   23), S( -33,    9), S( -51,  -11),
        S( -14,  -19), S( -14,   -3), S( -22,   11), S( -46,   21), S( -44,   23), S( -30,   16), S( -15,    7), S( -27,   -9),
        S(   1,  -27), S(   7,  -11), S(  -8,    4), S( -64,   13), S( -43,   14), S( -16,    4), S(   9,   -5), S(   8,  -17),
        S( -15,  -53), S(  36,  -34), S(  12,  -21), S( -54,  -11), S(   8,  -28), S( -28,  -14), S(  24,  -24), S(  14,  -43),
    ],
    // Queen
    [
        S( 997,  927), S(1025,  958), S(1054,  958), S(1037,  963), S(1084,  963), S(1069,  955), S(1068,  946), S(1070,  956),
        S(1001,  919), S( 986,  956), S(1020,  968), S(1026,  977), S(1009,  994), S(1082,  961), S(1053,  966), S(1079,  936),
        S(1012,  916), S(1008,  942), S(1032,  945), S(1033,  985), S(1054,  983), S(1081,  971), S(1072,  955), S(1082,  945),
        S( 998,  939), S( 998,  958), S(1009,  960), S(1009,  981), S(1024,  993), S(1042,  976), S(1023,  993), S(1026,  972),
        S(1016,  918), S( 999,  964), S(1016,  955), S(1015,  983), S(1023,  967), S(1021,  970), S(1028,  975), S(1022,  959),
        S(1011,  920), S(1027,  909), S(1014,  951), S(1023,  942), S(1020,  945), S(1027,  953), S(1039,  946), S(1030,  941),
        S( 990,  914), S(1017,  913), S(1036,  906), S(1027,  920), S(1033,  920), S(1040,  913), S(1022,  900), S(1026,  904),
        S(1024,  903), S(1007,  908), S(1016,  914), S(1035,  893), S(1010,  931), S(1000,  904), S( 994,  916), S( 975,  895),
    ],
    // Rook
    [
        S( 509,  525), S( 519,  522), S( 509,  530), S( 528,  527), S( 540,  524), S( 486,  524), S( 508,  520), S( 520,  517),
        S( 504,  523), S( 509,  525), S( 535,  525), S( 539,  523), S( 557,  509), S( 544,  515), S( 503,  520), S( 521,  515),
        S( 472,  519), S( 496,  519), S( 503,  519), S( 513,  517), S( 494,  516), S( 522,  509), S( 538,  507), S( 493,  509),
        S( 453,  516), S( 466,  515), S( 484,  525), S( 503,  513), S( 501,  514), S( 512,  513), S( 469,  511), S( 457,  514),
        S( 441,  515), S( 451,  517), S( 465,  520), S( 476,  516), S( 486,  507), S( 470,  506), S( 483,  504), S( 454,  501),
        S( 432,  508), S( 452,  512), S( 461,  507), S( 460,  511), S( 480,  505), S( 477,  500), S( 472,  504), S( 444,  496),
        S( 433,  506), S( 461,  506), S( 457,  512), S( 468,  514), S( 476,  503), S( 488,  503), S( 471,  501), S( 406,  509),
        S( 458,  503), S( 464,  514), S( 478,  515), S( 494,  511), S( 493,  507), S( 484,  499), S( 440,  516), S( 451,  492),
    ],
    // Bishop
    [
        S( 336,  283), S( 369,  276), S( 283,  286), S( 328,  289), S( 340,  290), S( 323,  288), S( 372,  280), S( 357,  273),
        S( 339,  289), S( 381,  293), S( 347,  304), S( 352,  285), S( 395,  294), S( 424,  284), S( 383,  293), S( 318,  283),
        S( 349,  299), S( 402,  289), S( 408,  297), S( 405,  296), S( 400,  295), S( 415,  303), S( 402,  297), S( 363,  301),
        S( 361,  294), S( 370,  306), S( 384,  309), S( 415,  306), S( 402,  311), S( 402,  307), S( 372,  300), S( 363,  299),
        S( 359,  291), S( 378,  300), S( 378,  310), S( 391,  316), S( 399,  304), S( 377,  307), S( 375,  294), S( 369,  288),
        S( 365,  285), S( 380,  294), S( 380,  305), S( 380,  307), S( 379,  310), S( 392,  300), S( 383,  290), S( 375,  282),
        S( 369,  283), S( 380,  279), S( 381,  290), S( 365,  296), S( 372,  301), S( 386,  288), S( 398,  282), S( 366,  270),
        S( 332,  274), S( 362,  288), S( 351,  274), S( 344,  292), S( 352,  288), S( 353,  281), S( 326,  292), S( 344,  280),
    ],
    // Knight
    [
        S( 170,  223), S( 248,  243), S( 303,  268), S( 288,  253), S( 398,  250), S( 240,  254), S( 322,  218), S( 230,  182),
        S( 264,  256), S( 296,  273), S( 409,  256), S( 373,  279), S( 360,  272), S( 399,  256), S( 344,  257), S( 320,  229),
        S( 290,  257), S( 397,  261), S( 374,  291), S( 402,  290), S( 421,  280), S( 466,  272), S( 410,  262), S( 381,  240),
        S( 328,  264), S( 354,  284), S( 356,  303), S( 390,  303), S( 374,  303), S( 406,  292), S( 355,  289), S( 359,  263),
        S( 324,  263), S( 341,  275), S( 353,  297), S( 350,  306), S( 365,  297), S( 356,  298), S( 358,  285), S( 329,  263),
        S( 314,  258), S( 328,  278), S( 349,  280), S( 347,  296), S( 356,  291), S( 354,  278), S( 362,  261), S( 321,  259),
        S( 308,  239), S( 284,  261), S( 325,  271), S( 334,  276), S( 336,  279), S( 355,  261), S( 323,  258), S( 318,  237),
        S( 232,  252), S( 316,  230), S( 279,  258), S( 304,  266), S( 320,  259), S( 309,  263), S( 318,  231), S( 314,  217),
    ],
    // Pawn
    [
        S(  82,   94), S(  82,   94), S(  82,   94), S(  82,   94), S(  82,   94), S(  82,   94), S(  82,   94), S(  82,   94),
        S( 180,  272), S( 216,  267), S( 143,  252), S( 177,  228), S( 150,  241), S( 208,  226), S( 116,  259), S(  71,  281),
        S(  76,  188), S(  89,  194), S( 108,  179), S( 113,  161), S( 147,  150), S( 138,  147), S( 107,  176), S(  62,  178),
        S(  68,  126), S(  95,  118), S(  88,  107), S( 103,   99), S( 105,   92), S(  94,   98), S(  99,  111), S(  59,  111),
        S(  55,  107), S(  80,  103), S(  77,   91), S(  94,   87), S(  99,   87), S(  88,   86), S(  92,   97), S(  57,   93),
        S(  56,   98), S(  78,  101), S(  78,   88), S(  72,   95), S(  85,   94), S(  85,   89), S( 115,   93), S(  70,   86),
        S(  47,  107), S(  81,  102), S(  62,  102), S(  59,  104), S(  67,  107), S( 106,   94), S( 120,   96), S(  60,   87),
        S(  82,   94), S(  82,   94), S(  82,   94), S(  82,   94), S(  82,   94), S(  82,   94), S(  82,   94), S(  82,   94),
    ],
];

#[derive(Debug, Clone, Copy, Default)]
pub struct ByteKnightValues {}

impl EvalValues for ByteKnightValues {
    type ReturnScore = PhasedScore;

    fn psqt(&self, square: u8, piece: Piece, side: Side) -> Self::ReturnScore {
        PSQTS[piece as usize][square::flip_if(side == Side::White, square) as usize]
    }
}

#[cfg(test)]
mod tests {
    use chess::board::Board;

    use super::*;
    use crate::{evaluation::Evaluation, psqt::Psqt, traits::Eval};

    #[test]
    fn verify_values_match_pesto() {
        let values = ByteKnightValues::default();
        let eval = Evaluation::new(values);

        let psqt = Psqt::new();

        let board =
            Board::from_fen("r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1")
                .unwrap();

        let score = psqt.evaluate(&board);
        println!("{}", score);
        let new_eval_score = eval.eval(&board);
        println!("{}", new_eval_score);
        assert_eq!(score, new_eval_score);
    }
}
