use chess::{
    definitions::NumberOf,
    pieces::Piece,
    side::Side,
    square::{self},
};

use crate::{
    phased_score::{PhasedScore, S},
    score::ScoreType,
    traits::EvalValues,
};

/// Game phase increment for each piece
/// Ordered to match the indexing of [`Piece`]
/// King, Queen, Rook, Bishop, Knight, Pawn
pub const GAMEPHASE_INC: [ScoreType; 6] = [0, 4, 2, 1, 1, 0];

/// Maximum game phase
pub const GAME_PHASE_MAX: i32 = 24;

/// Piece-Square Tables, ordered by the ordinality of the pieces. See ['pieces::Piece']
#[rustfmt::skip]
pub const PSQTS : [[PhasedScore; NumberOf::SQUARES]; NumberOf::PIECE_TYPES] = [
    // King
    [
        S(  15,  -85), S(  -9,  -35), S(  24,  -26), S(-116,   24), S( -61,    4), S( -10,    7), S(  38,   -1), S( 145, -108), 
        S(-101,    7), S( -62,   36), S(-106,   49), S(   1,   30), S( -52,   51), S( -46,   62), S(  -7,   52), S( -27,   22), 
        S(-123,   23), S( -21,   41), S( -88,   60), S(-106,   71), S( -66,   70), S(   9,   62), S( -11,   61), S( -47,   32), 
        S( -90,   13), S(-101,   47), S(-116,   64), S(-161,   77), S(-148,   76), S(-110,   70), S(-110,   62), S(-134,   37), 
        S( -84,    1), S( -93,   31), S(-123,   55), S(-150,   69), S(-148,   69), S(-111,   56), S(-116,   44), S(-139,   28), 
        S( -41,   -9), S( -26,   13), S( -82,   35), S( -94,   47), S( -88,   46), S( -85,   38), S( -40,   18), S( -57,    6), 
        S(  46,  -31), S(   6,   -4), S(  -8,    8), S( -42,   19), S( -43,   22), S( -25,   13), S(  22,   -5), S(  31,  -23), 
        S(  42,  -65), S(  65,  -46), S(  39,  -27), S( -59,   -9), S(   4,  -34), S( -35,  -11), S(  46,  -37), S(  47,  -65), 
    ],
    // Queen
    [
        S( 728, 1199), S( 736, 1212), S( 766, 1228), S( 799, 1215), S( 799, 1212), S( 803, 1205), S( 822, 1162), S( 769, 1192), 
        S( 765, 1163), S( 743, 1206), S( 750, 1240), S( 743, 1257), S( 748, 1274), S( 785, 1234), S( 764, 1218), S( 807, 1194), 
        S( 765, 1175), S( 763, 1192), S( 761, 1233), S( 777, 1235), S( 782, 1249), S( 823, 1229), S( 823, 1193), S( 821, 1180), 
        S( 749, 1185), S( 753, 1208), S( 757, 1222), S( 756, 1245), S( 758, 1258), S( 771, 1244), S( 770, 1229), S( 776, 1208), 
        S( 751, 1182), S( 749, 1211), S( 747, 1220), S( 756, 1239), S( 755, 1237), S( 754, 1229), S( 765, 1209), S( 768, 1196), 
        S( 748, 1171), S( 755, 1187), S( 750, 1210), S( 749, 1208), S( 752, 1212), S( 759, 1203), S( 771, 1181), S( 765, 1169), 
        S( 746, 1166), S( 751, 1170), S( 762, 1167), S( 761, 1177), S( 759, 1180), S( 768, 1154), S( 774, 1126), S( 785, 1096), 
        S( 744, 1159), S( 734, 1167), S( 741, 1171), S( 756, 1162), S( 748, 1166), S( 735, 1165), S( 757, 1135), S( 750, 1135), 
    ],
    // Rook
    [
        S( 409,  639), S( 400,  646), S( 407,  655), S( 412,  651), S( 430,  642), S( 446,  632), S( 429,  634), S( 449,  629), 
        S( 391,  639), S( 390,  651), S( 409,  655), S( 428,  646), S( 414,  646), S( 443,  632), S( 430,  628), S( 460,  615), 
        S( 370,  639), S( 391,  642), S( 393,  644), S( 396,  642), S( 424,  629), S( 425,  623), S( 462,  614), S( 439,  610), 
        S( 355,  641), S( 368,  640), S( 370,  649), S( 379,  645), S( 384,  630), S( 385,  625), S( 393,  621), S( 396,  615), 
        S( 336,  634), S( 339,  639), S( 349,  641), S( 361,  640), S( 361,  636), S( 346,  634), S( 369,  621), S( 361,  616), 
        S( 330,  630), S( 339,  630), S( 347,  629), S( 347,  634), S( 352,  630), S( 350,  622), S( 383,  602), S( 362,  603), 
        S( 327,  625), S( 339,  629), S( 353,  629), S( 350,  631), S( 354,  623), S( 356,  619), S( 373,  610), S( 344,  615), 
        S( 345,  620), S( 347,  630), S( 356,  637), S( 361,  636), S( 365,  628), S( 355,  623), S( 370,  619), S( 347,  612), 
    ],
    // Bishop
    [
        S( 274,  350), S( 256,  361), S( 267,  359), S( 227,  372), S( 237,  366), S( 255,  356), S( 284,  350), S( 247,  348), 
        S( 291,  337), S( 314,  356), S( 308,  360), S( 291,  363), S( 320,  354), S( 319,  353), S( 311,  361), S( 300,  336), 
        S( 300,  366), S( 323,  361), S( 324,  371), S( 347,  360), S( 333,  366), S( 364,  366), S( 341,  359), S( 329,  359), 
        S( 292,  362), S( 306,  377), S( 327,  372), S( 337,  385), S( 334,  378), S( 330,  376), S( 306,  375), S( 292,  362), 
        S( 286,  358), S( 298,  375), S( 304,  383), S( 324,  379), S( 321,  379), S( 307,  377), S( 299,  372), S( 294,  347), 
        S( 296,  357), S( 303,  367), S( 303,  375), S( 306,  375), S( 307,  379), S( 302,  375), S( 304,  358), S( 308,  347), 
        S( 298,  351), S( 299,  352), S( 310,  350), S( 289,  365), S( 296,  367), S( 309,  355), S( 315,  358), S( 302,  332), 
        S( 277,  335), S( 296,  352), S( 281,  333), S( 272,  355), S( 277,  351), S( 276,  352), S( 300,  338), S( 287,  322), 
    ],
    // Knight
    [
        S( 125,  261), S( 157,  322), S( 220,  335), S( 252,  328), S( 283,  331), S( 228,  308), S( 174,  329), S( 179,  240), 
        S( 256,  314), S( 272,  336), S( 297,  343), S( 314,  343), S( 298,  335), S( 359,  320), S( 272,  332), S( 294,  300), 
        S( 270,  331), S( 303,  346), S( 320,  362), S( 332,  363), S( 368,  347), S( 369,  342), S( 326,  336), S( 296,  321), 
        S( 266,  342), S( 279,  362), S( 303,  373), S( 323,  375), S( 306,  376), S( 330,  371), S( 289,  361), S( 299,  334), 
        S( 253,  343), S( 268,  352), S( 282,  375), S( 283,  375), S( 292,  378), S( 287,  369), S( 286,  354), S( 263,  334), 
        S( 235,  327), S( 256,  346), S( 270,  355), S( 273,  369), S( 284,  367), S( 274,  351), S( 277,  340), S( 250,  329), 
        S( 222,  318), S( 233,  334), S( 249,  343), S( 261,  346), S( 262,  346), S( 264,  341), S( 251,  325), S( 248,  329), 
        S( 180,  311), S( 232,  298), S( 219,  327), S( 233,  331), S( 237,  332), S( 250,  321), S( 234,  305), S( 209,  300), 
    ],
    // Pawn
    [
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( 136,  281), S( 157,  274), S( 135,  274), S( 165,  226), S( 148,  222), S( 132,  233), S(  66,  277), S(  41,  291), 
        S(  58,  223), S(  71,  231), S( 104,  197), S( 109,  176), S( 112,  168), S( 134,  153), S( 114,  199), S(  72,  198), 
        S(  43,  154), S(  67,  144), S(  70,  124), S(  73,  115), S(  93,  107), S(  85,  110), S(  89,  128), S(  66,  129), 
        S(  33,  130), S(  60,  127), S(  58,  110), S(  74,  107), S(  75,  105), S(  67,  106), S(  75,  118), S(  54,  110), 
        S(  31,  124), S(  55,  126), S(  55,  108), S(  56,  120), S(  71,  113), S(  60,  111), S(  89,  116), S(  60,  107), 
        S(  32,  128), S(  56,  129), S(  52,  116), S(  42,  122), S(  61,  127), S(  76,  116), S(  98,  115), S(  53,  108), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    ],
];

#[derive(Debug, Clone, Copy, Default)]
pub struct ByteKnightValues {}

impl EvalValues for ByteKnightValues {
    type ReturnScore = PhasedScore;

    fn psqt(&self, square: u8, piece: Piece, side: Side) -> Self::ReturnScore {
        PSQTS[piece as usize][square::flip_if(side == Side::White, square) as usize]
    }
}
