use chess::{
    definitions::NumberOf,
    pieces::Piece,
    side::Side,
    square::{self},
};

use crate::{
    phased_score::{PhasedScore, S},
    score::ScoreType,
    traits::EvalValues,
};

/// Game phase increment for each piece
/// Ordered to match the indexing of [`Piece`]
/// King, Queen, Rook, Bishop, Knight, Pawn
pub const GAMEPHASE_INC: [ScoreType; 6] = [0, 4, 2, 1, 1, 0];

/// Maximum game phase
pub const GAME_PHASE_MAX: i32 = 24;

/// Piece-Square Tables, ordered by the ordinality of the pieces. See ['pieces::Piece']
#[rustfmt::skip]
pub const PSQTS : [[PhasedScore; NumberOf::SQUARES]; NumberOf::PIECE_TYPES] = [
    // King
    [
        S(  10, -105), S( -23,  -43), S(   9,  -31), S(-130,   22), S( -71,    2), S(  -8,    4), S(  39,   -1), S( 153, -123),
        S(-118,    3), S( -73,   38), S(-130,   55), S(  -2,   33), S( -59,   58), S( -56,   71), S(   0,   58), S( -23,   21),
        S(-145,   24), S( -19,   43), S(-104,   67), S(-123,   79), S( -79,   80), S(  12,   70), S( -17,   70), S( -51,   33),
        S( -95,    8), S(-113,   50), S(-138,   74), S(-193,   88), S(-176,   87), S(-128,   80), S(-121,   69), S(-148,   39),
        S( -87,   -6), S(-105,   34), S(-142,   63), S(-179,   81), S(-173,   79), S(-127,   63), S(-129,   49), S(-154,   28),
        S( -39,  -14), S( -21,   13), S( -90,   39), S(-104,   53), S( -97,   52), S( -94,   42), S( -38,   18), S( -59,    5),
        S(  67,  -37), S(  16,   -6), S(   0,    8), S( -41,   20), S( -43,   24), S( -21,   13), S(  37,   -9), S(  48,  -30),
        S(  60,  -77), S(  88,  -56), S(  57,  -34), S( -63,  -12), S(  14,  -42), S( -34,  -15), S(  66,  -47), S(  67,  -81),
    ],
    // Queen
    [
        S( 860, 1380), S( 870, 1393), S( 907, 1412), S( 944, 1398), S( 943, 1398), S( 947, 1383), S( 969, 1332), S( 913, 1365),
        S( 906, 1342), S( 877, 1394), S( 890, 1426), S( 883, 1445), S( 891, 1463), S( 933, 1419), S( 905, 1401), S( 959, 1371),
        S( 909, 1351), S( 908, 1368), S( 903, 1420), S( 921, 1425), S( 928, 1438), S( 979, 1412), S( 981, 1367), S( 977, 1354),
        S( 890, 1359), S( 894, 1389), S( 900, 1405), S( 897, 1435), S( 900, 1450), S( 916, 1432), S( 914, 1415), S( 922, 1389),
        S( 890, 1358), S( 888, 1392), S( 886, 1404), S( 897, 1426), S( 896, 1424), S( 894, 1414), S( 908, 1389), S( 912, 1373),
        S( 888, 1340), S( 896, 1365), S( 890, 1391), S( 889, 1390), S( 893, 1393), S( 901, 1383), S( 916, 1355), S( 909, 1338),
        S( 885, 1336), S( 891, 1343), S( 904, 1341), S( 904, 1351), S( 901, 1355), S( 912, 1322), S( 919, 1286), S( 933, 1245),
        S( 882, 1327), S( 870, 1338), S( 878, 1342), S( 897, 1335), S( 887, 1338), S( 871, 1334), S( 900, 1288), S( 891, 1286),
    ],
    // Rook
    [
        S( 492,  747), S( 479,  756), S( 487,  767), S( 492,  762), S( 513,  751), S( 525,  741), S( 502,  746), S( 537,  735),
        S( 473,  748), S( 471,  761), S( 495,  766), S( 517,  756), S( 500,  756), S( 535,  740), S( 516,  737), S( 553,  719),
        S( 450,  747), S( 474,  750), S( 477,  752), S( 480,  751), S( 512,  736), S( 514,  727), S( 558,  718), S( 532,  711),
        S( 431,  749), S( 448,  746), S( 450,  758), S( 459,  754), S( 467,  736), S( 468,  729), S( 478,  724), S( 480,  717),
        S( 408,  740), S( 411,  746), S( 422,  749), S( 437,  747), S( 437,  742), S( 419,  739), S( 447,  724), S( 437,  719),
        S( 399,  736), S( 411,  735), S( 421,  735), S( 420,  740), S( 427,  734), S( 424,  725), S( 465,  701), S( 439,  703),
        S( 396,  730), S( 410,  734), S( 428,  734), S( 424,  736), S( 430,  727), S( 432,  721), S( 452,  711), S( 417,  717),
        S( 419,  725), S( 421,  734), S( 432,  743), S( 439,  741), S( 444,  732), S( 431,  727), S( 449,  722), S( 421,  714),
    ],
    // Bishop
    [
        S( 333,  407), S( 308,  423), S( 317,  421), S( 274,  435), S( 286,  429), S( 309,  416), S( 332,  411), S( 298,  407),
        S( 349,  397), S( 378,  416), S( 374,  422), S( 353,  425), S( 388,  412), S( 387,  413), S( 375,  422), S( 361,  393),
        S( 366,  426), S( 393,  421), S( 393,  433), S( 421,  420), S( 404,  426), S( 442,  427), S( 413,  420), S( 400,  418),
        S( 354,  422), S( 372,  441), S( 398,  434), S( 410,  449), S( 407,  441), S( 402,  438), S( 373,  437), S( 356,  421),
        S( 347,  416), S( 364,  436), S( 371,  446), S( 395,  442), S( 391,  441), S( 373,  439), S( 364,  432), S( 358,  403),
        S( 359,  415), S( 369,  428), S( 368,  437), S( 373,  437), S( 374,  441), S( 367,  436), S( 371,  417), S( 374,  404),
        S( 362,  409), S( 364,  409), S( 378,  407), S( 352,  425), S( 360,  427), S( 376,  413), S( 383,  415), S( 367,  387),
        S( 335,  388), S( 360,  410), S( 341,  387), S( 330,  413), S( 336,  407), S( 335,  409), S( 364,  394), S( 348,  374),
    ],
    // Knight
    [
        S( 153,  305), S( 184,  378), S( 263,  393), S( 300,  383), S( 333,  389), S( 272,  361), S( 204,  384), S( 216,  280),
        S( 304,  372), S( 327,  392), S( 359,  402), S( 379,  401), S( 361,  391), S( 433,  375), S( 326,  390), S( 352,  351),
        S( 324,  388), S( 368,  402), S( 388,  422), S( 403,  423), S( 445,  406), S( 447,  399), S( 395,  392), S( 359,  374),
        S( 323,  396), S( 339,  422), S( 368,  436), S( 394,  437), S( 372,  439), S( 402,  432), S( 352,  420), S( 363,  388),
        S( 307,  398), S( 325,  410), S( 343,  438), S( 345,  437), S( 356,  441), S( 350,  428), S( 348,  413), S( 320,  388),
        S( 284,  380), S( 311,  402), S( 328,  413), S( 332,  430), S( 345,  427), S( 333,  408), S( 337,  395), S( 304,  381),
        S( 268,  371), S( 281,  389), S( 302,  398), S( 316,  402), S( 318,  402), S( 321,  396), S( 304,  376), S( 301,  383),
        S( 217,  360), S( 280,  346), S( 264,  381), S( 282,  385), S( 288,  384), S( 303,  373), S( 284,  355), S( 250,  352),
    ],
    // Pawn
    [
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( 187,  325), S( 211,  316), S( 186,  313), S( 218,  257), S( 198,  253), S( 175,  265), S( 101,  315), S(  70,  333),
        S(  83,  244), S(  94,  256), S( 132,  209), S( 140,  185), S( 141,  176), S( 171,  164), S( 143,  219), S(  98,  214),
        S(  70,  160), S(  95,  151), S(  96,  126), S(  99,  113), S( 124,  107), S( 113,  113), S( 119,  136), S(  92,  135),
        S(  59,  135), S(  87,  136), S(  83,  115), S( 104,  108), S( 103,  108), S(  92,  112), S( 103,  126), S(  78,  116),
        S(  58,  126), S(  82,  132), S(  81,  110), S(  82,  120), S(  98,  116), S(  84,  115), S( 121,  122), S(  86,  111),
        S(  56,  136), S(  81,  139), S(  74,  124), S(  61,  130), S(  85,  137), S( 103,  124), S( 131,  123), S(  76,  116),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    ],
];

pub const PASSED_PAWN_BONUS: [PhasedScore; NumberOf::PASSED_PAWN_RANKS] = [
    S(-37, 11),
    S(0, 42),
    S(2, 50),
    S(-24, 32),
    S(-74, 62),
    S(-16, -2),
];

const RANK_1: u8 = 1;

#[derive(Debug, Clone, Copy, Default)]
pub struct ByteKnightValues {}

impl EvalValues for ByteKnightValues {
    type ReturnScore = PhasedScore;

    fn psqt(&self, square: u8, piece: Piece, side: Side) -> Self::ReturnScore {
        PSQTS[piece as usize][square::flip_if(side == Side::White, square) as usize]
    }

    fn passed_pawn_bonus(&self, square: u8, side: Side) -> Self::ReturnScore {
        let (_file, rank) = square::from_square(square::flip_if(side == Side::White, square));
        PASSED_PAWN_BONUS[(rank - RANK_1) as usize]
    }
}
